{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(python -m pytest --co -q)",
      "Bash(python -m pytest tests/test_auth_service.py -v)",
      "Bash(python -m pytest tests/test_financial_extractor.py -v)",
      "Bash(python -m pytest tests/test_formula_engine.py -v)",
      "Bash(python -m pytest --co)",
      "Bash(python:*)",
      "Bash(timeout 60 python -m pytest --tb=no -x)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm ls:*)",
      "Bash(ls:*)",
      "Bash(git mv:*)",
      "Bash(npm test)",
      "Bash(rm:*)",
      "Bash(npm run test:unit:*)",
      "Bash(npm run test:*)",
      "Bash(npx vitest run:*)",
      "Bash(find:*)",
      "Bash(npm run lint)",
      "Bash(npm run build:*)",
      "Bash(npm test:*)",
      "Bash(npx vitest:*)",
      "Bash(timeout 240 npm test)",
      "Bash(cp:*)",
      "Bash(dir)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" run_migrations.py)",
      "Bash(pytest:*)",
      "Bash(flake8:*)",
      "Bash(py:*)",
      "Bash(git fetch:*)",
      "Bash(git pull:*)",
      "Bash(railway logs:*)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m alembic revision -m \"fix_duplicate_indexes\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m alembic check)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"import alembic.versions.006_add_advanced_indexes; import alembic.versions.007_add_missing_user_columns; import alembic.versions.9dd5d1ac7ef0_fix_duplicate_indexes; print(''✅ All migrations syntax is valid'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m py_compile \"C:\\Python Dev Folder\\fin-model\\fin-model\\backend\\alembic\\versions\\006_add_advanced_indexes.py\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m py_compile \"C:\\Python Dev Folder\\fin-model\\fin-model\\backend\\alembic\\versions\\007_add_missing_user_columns.py\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m py_compile \"C:\\Python Dev Folder\\fin-model\\fin-model\\backend\\alembic\\versions\\9dd5d1ac7ef0_fix_duplicate_indexes.py\")",
      "Bash(railway status:*)",
      "Bash(railway deploy:*)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m py_compile \"C:\\Python Dev Folder\\fin-model\\fin-model\\backend\\alembic\\versions\\008_add_enhanced_auth_tables.py\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"import alembic.versions.006_add_advanced_indexes; import alembic.versions.007_add_missing_user_columns; import alembic.versions.9dd5d1ac7ef0_fix_duplicate_indexes; import alembic.versions.008_add_enhanced_auth_tables; print(''✅ All migrations syntax is valid'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m alembic revision -m \"add_parameter_groups_and_history\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m py_compile \"C:\\Python Dev Folder\\fin-model\\fin-model\\backend\\alembic\\versions\\93a0bb4bdb0b_add_parameter_groups_and_history.py\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m alembic upgrade head)",
      "Bash(git stash:*)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m alembic revision -m \"add_monte_carlo_simulation_tables\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m py_compile \"C:\\Python Dev Folder\\fin-model\\fin-model\\backend\\alembic\\versions\\e55cf976aaaa_add_monte_carlo_simulation_tables.py\")",
      "Bash(timeout 30 npm test -- dashboard-integration.test.tsx --run)",
      "Bash(mkdir:*)",
      "Bash(timeout 30 npm run build)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m alembic revision -m \"add_enhanced_authentication_features\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m py_compile \"C:\\Python Dev Folder\\fin-model\\fin-model\\backend\\alembic\\versions\\951cd05e0ae0_add_enhanced_authentication_features.py\")",
      "Bash(set TEST_DATABASE_URL=sqlite:///./test.db)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.core.config import settings; print(''TEST_DB:'', settings.TEST_DATABASE_URL)\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m alembic revision -m \"add_advanced_reporting_collaboration_tables\")",
      "Bash(git checkout:*)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m alembic revision -m \"add_notification_tables\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m py_compile \"C:\\Python Dev Folder\\fin-model\\fin-model\\backend\\alembic\\versions\\cb40847ce093_add_notification_tables.py\")",
      "Bash(mv:*)",
      "Bash(timeout 30 npm test -- performance.test.tsx --run)",
      "Bash(timeout 60 npm test -- a11y.test.tsx --run)",
      "Bash(timeout 120 npm test -- --run)",
      "Bash(timeout 30 npm test -- AuthGuard.test.tsx --run)",
      "Bash(timeout 60 npm test:*)",
      "Bash(grep:*)",
      "Bash(npm install:*)",
      "Bash(pnpm import:*)",
      "Bash(timeout 120 npm run test:build-performance)",
      "Bash(timeout 60 pnpm install:*)",
      "Bash(timeout 30 pnpm build:netlify:prod)",
      "Bash(pnpm install:*)",
      "Bash(timeout 60 npm run build:netlify:prod)",
      "Bash(npm run preview:*)",
      "Bash(npx eslint:*)",
      "Bash(timeout 60 pnpm:*)",
      "Bash(timeout 10 pnpm dev)",
      "Bash(timeout 30 npm test -- --run)",
      "Bash(timeout 30 pnpm test)",
      "Bash(pnpm run:*)",
      "Bash(timeout 30 pnpm test:minimal:ci)",
      "Bash(timeout 30 pnpm build)",
      "Bash(timeout 30 pnpm build:netlify)",
      "Bash(timeout 30 pnpm run lint:ci)",
      "Bash(timeout 30 pnpm run type-check)",
      "Bash(pnpm add:*)",
      "Bash(DEBUG=vite:*)",
      "Bash(timeout:*)",
      "Bash(pnpm build:netlify:*)",
      "Bash(pnpm list:*)",
      "Bash(curl:*)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" \"C:\\Python Dev Folder\\fin-model\\fin-model\\backend\\clear_rate_limits.py\")",
      "Bash(git rm:*)",
      "Bash(rg:*)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -m alembic revision -m \"remove_non_essential_tables_for_lean_app\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''✅ Application imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''✅ Application imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.services.lean_financial_engine import LeanFinancialEngine, CoreParameters; print(''✅ Lean financial engine imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.services.lean_financial_engine import LeanFinancialEngine, CoreParameters; engine = LeanFinancialEngine(None); params = CoreParameters(); model = engine.calculate_comprehensive_model(params); print(''✅ Lean financial engine works! Net income:'', model[''profit_loss''].net_income)\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.services.lean_financial_engine import LeanFinancialEngine, CoreParameters; engine = LeanFinancialEngine(None); params = CoreParameters(); model = engine.calculate_comprehensive_model(params); print(''Lean financial engine works! Net income:'', model[''profit_loss''].net_income)\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.services.lean_parameter_manager import LeanParameterManager; manager = LeanParameterManager(None); groups = manager.get_parameter_groups(); print(''Parameter manager works! Categories:'', len(groups))\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.services.lean_parameter_manager import LeanParameterManager; manager = LeanParameterManager(None); groups = manager.get_parameter_groups(); print(''Parameter manager works! Categories:'', len(groups))\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" test_lean_engine.py)",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.services.lean_financial_engine import LeanFinancialEngine, CoreParameters; engine = LeanFinancialEngine(None); params = CoreParameters(); model = engine.calculate_comprehensive_model(params); print(''Backend integration test successful! Net income:'', model[''profit_loss''].net_income)\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.services.lean_financial_engine import LeanFinancialEngine, CoreParameters; engine = LeanFinancialEngine(None); params = CoreParameters(); model = engine.calculate_comprehensive_model(params); print(''Backend integration test successful! Net income:'', model[''profit_loss''].net_income)\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''✅ Backend application imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''✅ Backend application imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''✅ Backend application imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''✅ Backend application imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''Backend application imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''Backend application imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''Backend application imports successfully'')\")",
      "Bash(\"C:\\Python Dev Folder\\fin-model\\fin-model\\.venv\\Scripts\\python.exe\" -c \"from app.main import app; print(''Backend application imports successfully'')\")"
    ],
    "deny": []
  }
}